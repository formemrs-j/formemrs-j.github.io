<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端全栈学习</title>
      <link href="/2021/11/04/qian-duan-quan-zhan-xue-xi/"/>
      <url>/2021/11/04/qian-duan-quan-zhan-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="学习日记"><a href="#学习日记" class="headerlink" title="学习日记"></a>学习日记</h1><h2 id="2021-11-04"><a href="#2021-11-04" class="headerlink" title="2021-11-04"></a>2021-11-04</h2><ul><li><strong>配置开发工具-vscode</strong></li><li><strong>安装Sublime插件</strong></li><li><strong>安装live server插件</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">ctrl+shift+d 复制当前行ctrl+shift+↑ 上移当前行ctrl+shift+↓ 下移当前行按住鼠标滚轮向下滑动可以多行编辑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="html5骨架"><a href="#html5骨架" class="headerlink" title="html5骨架"></a>html5骨架</h3><ul><li>第一行必须是DTD(Document Type Definition,文档类型声明)</li><li>不写会导致浏览器兼容问题</li><li>标准制定机构-W3C(The World Wide Web Consortium,万维网联合会，成立于1994，负责Html和Css标准指定)</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>head标签对是对网页的配置项</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超星作业云函数</title>
      <link href="/2021/09/27/chao-xing-zuo-ye-yun-han-shu/"/>
      <url>/2021/09/27/chao-xing-zuo-ye-yun-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>每小时检测是否有未完成的作业，有通过微信推送提醒</li></ul><h2 id="云函数代码"><a href="#云函数代码" class="headerlink" title="云函数代码"></a>云函数代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requestsimport reimport jsonREQUEST_URL='https://mooc1.chaoxing.com/mooc2/work/list?courseId=219653330&amp;classId=44557992&amp;cpi=148310557&amp;enc=f6c483c0cffe260125bd505724007a28'REQUEST_HEADER={    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36',    'cookie':""}PUSH_TOKEN=""homework_pattern="&lt;ul&gt;(.*?)&lt;/ul&gt;"title_pattern=r'&lt;p class="overHi.*?&gt;(.*?)&lt;/p&gt;'status_pattern=r'&lt;p class="status"&gt;(.*?)&lt;/p&gt;'deadline_pattern=r'&lt;img class.*?&gt;(.*?)&lt;/div&gt;'response=requests.get(url=REQUEST_URL,headers=REQUEST_HEADER)response.encoding='utf-8'#res=re.findall(homework_pattern,response.text,re.S | re.M)log=[]def inquiries_homework():    single_homework=re.findall(title_pattern,response.text,re.S | re.M)    single_status=re.findall(status_pattern,response.text, re.M |re.S)    single_deadline=re.findall(deadline_pattern,response.text,re.S | re.M)    for i in single_status:        if i == '未交':            num=single_status.index(i)            homework=single_homework[num]            status=single_status[num]            deadline=single_deadline[num]            log.append("作业名称：**"+homework.strip()+"**剩余时间：**"+deadline.strip()+"**当前状态："+status.strip())            print(log)            push()    # for i in single_deadline:    #     if i != '':    #         num=single_deadline.index(i)    #         homework=single_homework[num]    #         status=single_status[num]    #         deadline=i.strip()    #         log.append("作业名称：**"+homework.strip()+"**剩余时间：**"+deadline+"**当前状态："+status.strip())    #         push()def push():    token = PUSH_TOKEN    title= '主人，您在超星学习通还有份数学作业未完成，请尽快完成！'     content =log    url = 'http://pushplus.hxtrip.com/send'    data = {    "token":token,    "title":title,    "content":content,    "template":"html"    }    body=json.dumps(data).encode(encoding='utf-8')    headers = {'Content-Type':'application/json'}    requests.post(url,data=body,headers=headers)    print('发送成功')def main_handler(event, context):    inquiries_homework()if __name__=='__main__':    inquiries_homework()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教务网公告云函数</title>
      <link href="/2021/09/27/jiao-wu-wang-gong-gao-yun-han-shu/"/>
      <url>/2021/09/27/jiao-wu-wang-gong-gao-yun-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>每小时监控是否有新的新闻发布，如果有将通过pushplus推送</li></ul><h2 id="云函数代码"><a href="#云函数代码" class="headerlink" title="云函数代码"></a>云函数代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requestsimport reimport datetimeimport jsonREQUEST_URL = 'https://jww.zjgsu.edu.cn/1319/list.htm'REQUEST_HEADER={    'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36 Edg/94.0.992.31',    'accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',    'cache-control':'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6'}log=[]PUSH_TOKEN="你的token"#你的tokennews_pattern = r'li class="column-news-item item.*?&gt;(.*?)&lt;/li&gt;' #匹配所有新闻new_pattern = r'&lt;a .*?&gt;(.*?)&lt;/a&gt;' #匹配文本date_pattern = r'&lt;span class="column-news-date news-date.*?&gt;(.*?)&lt;/span&gt;'#匹配日期#link_pattern=r'href="(.*?)"'#匹配网址def get_news():    response = requests.get(url=REQUEST_URL,headers=REQUEST_HEADER)    response.encoding='utf-8'    total_news = re.findall(news_pattern, response.text, re.S | re.M)    now_time = datetime.datetime.now().strftime('%Y-%m-%d')    for content in total_news:        news = re.findall(new_pattern, content, re.S | re.M)        date = re.findall(date_pattern, content, re.S | re.M)#       link=re.findall(link_pattern,content,re.I | re.S | re.M)        if date[0] == now_time:           log.append(news[0]+"|"+date[0])           print("任务完成")           push()def push():    token = PUSH_TOKEN    title= '主人，发现一条新的教务网新闻'     content =log    url = 'http://pushplus.hxtrip.com/send'    data = {    "token":token,    "title":title,    "content":content,    "template":"html"    }    body=json.dumps(data).encode(encoding='utf-8')    headers = {'Content-Type':'application/json'}    requests.post(url,data=body,headers=headers)    print('发送成功')def main_handler(event, context):    get_news()if __name__=='__main__':    get_news()#total_news=re.findall('&lt;ul&gt;(.*?)&lt;div id="wp_paging_w9"&gt;',response.text,re.I | re.S | re.M)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构C语言</title>
      <link href="/2021/09/22/chong-gou-c-yu-yan/"/>
      <url>/2021/09/22/chong-gou-c-yu-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="重构C语言体系"><a href="#重构C语言体系" class="headerlink" title="重构C语言体系"></a>重构C语言体系</h1><h2 id="C语言必备基础"><a href="#C语言必备基础" class="headerlink" title="C语言必备基础"></a>C语言必备基础</h2><ul><li>环境搭建-略</li><li>使用开发工具，CLion</li><li>配置CLion,代码风格选择谷歌，编译器创建三个vs-64,vs-32,MINGW,debug两个vs-64,MINGW</li></ul><p><strong>编写第一行代码</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;/** * This program calculate summary from 0 to 9. * @param argc parameter count * @param argv parameters * @return 0 */int main(int argc,char **argv) {  int sum = 0;  int i = 0;  while (i &lt;10){    sum = sum +i;    i++;  }  printf("%d\n",sum);  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> c language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫日常</title>
      <link href="/2021/09/12/python-pa-chong/"/>
      <url>/2021/09/12/python-pa-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="记录自己从零学习Python爬虫"><a href="#记录自己从零学习Python爬虫" class="headerlink" title="记录自己从零学习Python爬虫"></a>记录自己从零学习Python爬虫</h2><h2 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h2><ul><li><strong>2021.9.19 第五章变量与运算符</strong></li><li><strong>2021.9.20第九章面向对象</strong></li><li><strong>2021.9.21第十章正则表达式与json</strong></li><li><strong>2021.9.22第十三章原生爬虫</strong></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><strong>数字整型，浮点</strong></p><ul><li><p>python number数据类型包含整型(int)和浮点型(float),float不区分单双精度，默认为双精度</p></li><li><p>查看输入的数据类型，用函数type()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; type(1)&lt;class 'int'&gt;&gt;&gt;&gt; type(1*1.0)&lt;class 'float'&gt;&gt;&gt;&gt; type(1/1)&lt;class 'float'&gt;&gt;&gt;&gt; type(1//2)&lt;class 'int'&gt;&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>python 乘法用* 除法用/(除法返回为float)  强制转换为返回整型除法(int)用//</p></li></ul><p> <strong>各进制之间的表示与转换</strong></p><ul><li><p>python 表示二进制在前面加上特殊标识符<strong>0b</strong> 例如<strong>0b10</strong></p></li><li><p>表示八进制的特殊符号为<strong>0o</strong>例如<strong>0o10</strong></p></li><li><p>表示十六进制的特殊符号为<strong>0x</strong>例如<strong>0x10</strong></p></li><li><p>强制进制转换二进制为bin(),八进制为oct(),十进制int(),十六进制为()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; 0b102&gt;&gt;&gt; 0b113&gt;&gt;&gt; 0o108&gt;&gt;&gt; 0o119&gt;&gt;&gt; 0x1016&gt;&gt;&gt; 0x1F31&gt;&gt;&gt; bin(10)'0b1010'&gt;&gt;&gt; bin(0xE)'0b1110'&gt;&gt;&gt; bin(0o7)'0b111'&gt;&gt;&gt; int(0b111)7&gt;&gt;&gt; int(0o77)63&gt;&gt;&gt; hex(888)'0x378'&gt;&gt;&gt; hex(0b111)'0x7'&gt;&gt;&gt; oct(0b111)'0o7'&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>布尔类型</strong></p><ul><li>布尔类型也属于number</li><li>0表示False,1表示True</li><li>大多数情况下，非空即为True,空即为False</li><li>强制转换为bool类型，用方法bool()</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; bool(1)True&gt;&gt;&gt; bool(0)False&gt;&gt;&gt; bool("ni")True&gt;&gt;&gt; bool("")False&gt;&gt;&gt; bool(None)False&gt;&gt;&gt; bool([])False&gt;&gt;&gt; bool([1])True&gt;&gt;&gt; bool({})False&gt;&gt;&gt; bool({1,1})True&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复数</strong></p><ul><li>python表示复数用字母j,例如36j</li></ul><p><strong>字符串单双引号</strong></p><ul><li><p>python表示字符串可以用英文的“ ”，或者英文的‘ ’，单双引号必须成对出现</p></li><li><p>在表示例如Let’s go 这句话时，可以用两种方法</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; "Let's go""Let's go"&gt;&gt;&gt; 'Let\'s go'"Let's go"&gt;&gt;&gt; type("A")&lt;class 'str'&gt;&gt;&gt;&gt; str(1)'1'&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>强制转换成字符串类型可以用方法<strong>str()</strong></li></ul><p><strong>多行字符串</strong></p><ul><li>多行字符串用””” “””三引号包含，三引号在IDLE中可以实现回车换行，单引号需要转义字符\，三引号不用单独成行</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; """你好啊你好啊你好啊"""'\n你好啊\n你好啊\n你好啊\n'&gt;&gt;&gt; 'nihao\nihao''nihaonihao'&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>转义字符</strong></p><ul><li>\n换行符 \t横向制表符 \r回车</li><li>\r 和\n不是一个东西，有细微区别</li></ul><p>问题:输入”hello \n world”并且\n被当成字符串输出，有两种解决方案</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; print("hello \n world")hello  world&gt;&gt;&gt; print("hello \\nworld")hello \nworld&gt;&gt;&gt; print(r"hello \nworld")hello \nworld&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>print()函数在输出字符串前<strong>加r</strong>会把后面字符串当作原始字符串输出</li></ul><p><strong>字符串的运算</strong></p><ul><li>字符串可以用+号相加</li><li>字符串可以乘以数字得到多个相同字符串</li><li>取出字符串某个字母在字符串后加入[]</li><li>[]中的序号从0开始，可以为负数，复数为从末尾往前数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; "hello"+"world"'helloworld'&gt;&gt;&gt; "hello"*3'hellohellohello'&gt;&gt;&gt; "hello world"[1]'e'&gt;&gt;&gt; "hello world"[6]'w'&gt;&gt;&gt; "hello world"[-5]'w'&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>截取”hello world“中的world的方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; "hello world"[6:11]'world'&gt;&gt;&gt; "hello world"[6:]'world'&gt;&gt;&gt; "hello world"[6:-1]'worl'&gt;&gt;&gt; "hello world"[-6:]' world'&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在字符串后加入**[:]**可以取出字符串的某个片段</li></ul><p><strong>列表</strong></p><ul><li>以[]包含的就是列表</li><li>访问列表的某个元素在列表后再加入一个[],操作和字符串相同</li><li>列表可以乘以数字，可以相加</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; ["Q","W","E","R"]['Q', 'W', 'E', 'R']&gt;&gt;&gt; type(["Q","W","E","R"])&lt;class 'list'&gt;&gt;&gt;&gt; ["Q","W","E","R"][1]'W'&gt;&gt;&gt; ["Q","W","E","R"][0:3]['Q', 'W', 'E']&gt;&gt;&gt; ["Q","W","E","R"]+["D"+"F"]['Q', 'W', 'E', 'R', 'DF']&gt;&gt;&gt; ["Q","W","E","R"]+["D","F"]['Q', 'W', 'E', 'R', 'D', 'F']&gt;&gt;&gt; ["Q","W","E","R"]*2['Q', 'W', 'E', 'R', 'Q', 'W', 'E', 'R']&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>元组</strong></p><ul><li>以()容纳的就是元组，元组的操作和列表字符串一致</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; (1,2,3,4)(1, 2, 3, 4)&gt;&gt;&gt; type((1,2))&lt;class 'tuple'&gt;&gt;&gt;&gt; (1,2,3)[1:2](2,)&gt;&gt;&gt; (1,2,3)[1:3](2, 3)&gt;&gt;&gt; (1,2,3)+(1,2)(1, 2, 3, 1, 2)&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串，列表，元组都是序列，都可以支持<strong>切片操作</strong></li><li>方法ord()获取对应的ascii码，len()方法获取元素个数，max(),min(),取最大最小元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; len("hello world")11&gt;&gt;&gt; max("hello world")'w'&gt;&gt;&gt; min("hello world")' '&gt;&gt;&gt; ord("w")119&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>集合</strong></p><ul><li>以{}包含的是集合</li><li>集合满足数学上集合的特性，无序性，互异性，确定性</li><li>集合取差集用-号，取交集用&amp;，取合集用 |</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; len({1,2,2})2&gt;&gt;&gt; 1 in {1,2}True&gt;&gt;&gt; 1 in {2,3}False&gt;&gt;&gt; 1 not in {2,3}True&gt;&gt;&gt; type({})&lt;class 'dict'&gt;&gt;&gt;&gt; type(set())&lt;class 'set'&gt;&gt;&gt;&gt; {1,2,3}-{3,4}{1, 2}&gt;&gt;&gt; {1,2,3} &amp; {3,4}{3}&gt;&gt;&gt; {1,2,3} | {3,4}{1, 2, 3, 4}&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字典</strong></p><ul><li>以{key:value,key1:value1}这种形式的数据类型为字典，一个key对应一个value,key不能重复</li><li>访问字典中的元素必须用key来访问，key必须为不可变的数据类型，例如，int,str,tuple</li><li>空的字典用{}来定义</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; type({})&lt;class 'dict'&gt;&gt;&gt;&gt; {"Q":"A","W":"B"}{'Q': 'A', 'W': 'B'}&gt;&gt;&gt; {"Q":"A","W":"B"}["Q"]'A'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据类型思维导图</strong></p><ul><li><img src="https://s3.bmp.ovh/imgs/2021/09/883d7609737860ec.png" style="zoom:50%;"></li></ul><h2 id="变量与运算符"><a href="#变量与运算符" class="headerlink" title="变量与运算符"></a>变量与运算符</h2><p><strong>变量命名</strong></p><ul><li><p>命名不能用系统保留关键字</p></li><li><p>命名不能以数字开头，最好有意义</p></li><li><p>python变量没有类型限制</p></li><li><p>int str  tuple为值类型不可变 list set dict为引用类型可变</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; a = "apple"&gt;&gt;&gt; id(a)2204424123120&gt;&gt;&gt; a=a+"banana"&gt;&gt;&gt; id(a)2204390996464&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>a为新生成的字符串并不是原来的字符串所以可改变</li></ul><p><strong>理解元组不可变而列表可变</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; a = [1,2,3]&gt;&gt;&gt; id(a)2826926110208&gt;&gt;&gt; a[1]="2"&gt;&gt;&gt; id(a)2826926110208&gt;&gt;&gt; b=(1,2,[3,4])&gt;&gt;&gt; b[2][1]4&gt;&gt;&gt; b[2][1]=6&gt;&gt;&gt; print(b)(1, 2, [3, 6])&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>算术运算符</strong></p><ul><li>常见的+，-，*，/都可以</li><li>乘方用**，除法取整用//，取余数用%</li></ul><p><strong>赋值运算符</strong></p><ul><li>先赋值后运算</li><li>例如a+=1,就相当于a=a+1,其他类似</li></ul><p><strong>比较运算符（关系运算符）</strong></p><ul><li>返回的是布尔类型</li><li>不仅仅是数字才能比较，字母（转换成ascii码比较）,元组，列表按序号一个个比较</li></ul><p><strong>成员运算符</strong></p><ul><li>in 例如 1in [1,2,3] 返回True</li><li>not in 是否不在</li><li>返回的都是布尔类型</li></ul><p><strong>身份运算符</strong></p><ul><li>is 例如 1 is 1.0 返回False（比较的是内存地址）</li><li>有别于== ，比较的是值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; a={2,1,3}&gt;&gt;&gt; b={2,3,1}&gt;&gt;&gt; a==bTrue&gt;&gt;&gt; a is bFalse&gt;&gt;&gt; a=(2,1,3)&gt;&gt;&gt; b=(2,3,1)&gt;&gt;&gt; a==bFalse&gt;&gt;&gt; a is bFalse&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>位运算符</strong></p><ul><li>&amp;按位与 计算规则 先把数字转换为二进制一位位比较，如果都是1，返回1，否则返回0，再将计算结果转换为十进制输出</li><li>|按位或 计算规则 先把数字转换为二进制一位位比较，如果有一位是1，返回1，否则返回0，再将计算结果转换为十进制输出</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; bin(2)'0b10'&gt;&gt;&gt; bin(3)'0b11'&gt;&gt;&gt; a=2&gt;&gt;&gt; b=3&gt;&gt;&gt; a&amp;b2&gt;&gt;&gt; a|b3&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象的三个特征</strong></p><ul><li>python 一切皆对象</li><li>对象的三个特征 值，类型，身份</li><li>判断身份除了type(),最好用isinstance(),第一个参数为要判断的变量，第二个参数为判断的类型，第二个参数可以是元组，可以是列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; a=1&gt;&gt;&gt; isinstance(a,int)True&gt;&gt;&gt; isinstance(a,(int,str))True&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>变量与运算符思维导图</strong></p><p><img src="https://s3.bmp.ovh/imgs/2021/09/77e9e8c4d017da03.png"></p><h2 id="分支，循环，条件，与枚举"><a href="#分支，循环，条件，与枚举" class="headerlink" title="分支，循环，条件，与枚举"></a>分支，循环，条件，与枚举</h2><p><strong>表达式</strong></p><ul><li>表达式(Expression)是运算符(operator)和操作数(operand)所构成的序列</li><li>同级表达式遵从左结合的运算规则(即从左向右进行)</li><li>含有赋值运算符的遵从右结合(即等号右边优先计算）</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license()" for more information.&gt;&gt;&gt; a=1&gt;&gt;&gt; b=2&gt;&gt;&gt; c=2&gt;&gt;&gt; not a or b+2 ==cFalse&gt;&gt;&gt; (not a) or ((b+2) ==c)False&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>python变量和常量的命名规则</strong></p><ul><li>常量命名全部大写</li><li>变量用_连接，例如user_account，而不用userAccount</li></ul><p><strong>流程控制语句</strong></p><ul><li>if else</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mood = Falseif mood :    print('go to left')else :    print('go to right')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">PS D:\py&gt; python c1.pygo to right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>简单的登录小程序</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">ACCOUNT="wwj"PASSWORD="123456"print("请输入账号")user_account = input()print("请输入密码")user_password = input()if user_account == ACCOUNT and user_password == PASSWORD:    print("登录成功")else:    print("登录失败")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>elif用法</strong></p><ul><li>elif不能单独使用，必须和if语句配套使用</li><li>elif使代码更加简洁</li></ul><p><strong>错误分析</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a = input()if a == 1:    print("apple")elif a== 2:    print("banana")else:    print("peach")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>错误原因，代码无论输入什么都是输出“peach”，因为输入的是字符串，而判断的是数字</li></ul><p><strong>改进</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a = input()a=int(a)if a == 1:    print("apple")elif a== 2:    print("banana")else:    print("peach")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加语句 a=int(a)，强制转换成整数型</li><li>在进行简单判断时，不要思维定势，可以用简单的逻辑运算符代替</li></ul><p><strong>循环语句</strong></p><p><strong>while</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">counter = 1while counter &lt;= 10:    counter+=1    print(counter)else:    print("结束") <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>while循环容易出现死循环，一般用for代替</li></ul><p><strong>for in</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a=[["apple","banana","peach"],(1,2,3)]for x in a:    for y in x:        print(y)else:    print("end")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>for in常用于遍历字典 列表</li><li>for in 可以配合else使用</li></ul><p><strong>for in range()</strong></p><ul><li>指定次数循环</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">for x in range(1,10):    if x == 3:        break    print(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以搭配break使用，直接跳出循环</li><li>也可以配合continue使用,除了判断的这个条件不执行，其他继续执行</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">for x in range(1,10):    if x == 3:        continue    print(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>切片代替for</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a=[1,2,3,4,5,6,7,8]for x in range(0,len(a),2):    print(a[x])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>可以打印出，1，3，5，7</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a=[1,2,3,4,5,6,7,8]# for x in range(0,len(a),2):#     print(a[x])b=a[0:len(a):2]print(b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用切片一样可以代替</li></ul><h2 id="包，模块，函数，变量的作用域"><a href="#包，模块，函数，变量的作用域" class="headerlink" title="包，模块，函数，变量的作用域"></a>包，模块，函数，变量的作用域</h2><p><strong>python项目的组织结构</strong></p><ul><li>包，模块，类，函数，变量</li></ul><p><strong>导入模块</strong></p><ul><li>方法一</li><li>import方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import t.c4 print(t.c4.a)print(t.c4.b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>方法二</li><li>简化写法 import as</li><li>将模块名在引用时重命名达到简写的目的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import t.c4 as wprint(w.a)print(w.b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>方法三</li><li>from 模块 import * 导入包内所有变量，也可引入单个变量</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">from t.c4 import *print(a)print(b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>方法四</li><li>方法三的加强，在要导入的模块添加“__all__”变量,限制引入的变量</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">__all__=["a","b","c"]a = 1b = 2c = 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法五</li><li>from 包 引入 模块</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">from t import c4print(c4.a)print(c4.b)print(c4.c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>包文件中有一个__init__.py的头文件，导入包时会优先执行头文件中的内容</li><li>可以在头文件中添加<strong>all</strong>变量来限制导入的内容</li><li>导入包时禁止循环导入，python会自动报错</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">__all__=["a"]a = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>方法六</li><li>引入多个变量可以使用都好隔开</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">from t.c4 import a,b,c print(a)print(b)print(c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内置变量</strong></p><ul><li>可以用**dir()**函数查看当前模块内的所有变量(包括内置的)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">infos = dir()print(infos)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>绝对导入和相对导入</strong></p><ul><li>入口文件不能用相对导入</li><li>模块可以相对导入，但是不能超过顶级包</li><li>入口文件可以直接导入</li></ul><h2 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h2><p><strong>特性</strong></p><ul><li>功能性</li><li>隐藏细节</li><li>避免编写重复的代码</li></ul><p><strong>自定义函数</strong></p><ul><li>def 函数名():</li></ul><p><strong>自己定义的加法函数和打印函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def add(x,y):    result=x+y    return resultdef printing(code):    print(code)print(add(1,2))printing("test")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>让函数返回多个结果</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def add(x,y):    result1=x+y    result2=x*y    return result1,result2a,b = add(1,2)print(a,b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>return多个值以逗号隔开</li></ul><p><strong>序列解包与链式赋值</strong></p><ul><li>序列解包</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a = 1,2,3b,c,d=aprint(b,c,d)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>链式赋值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a=b=c=1print(a,b,c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>形参和实参</strong></p><ul><li>函数中定义的参数为形式参数</li><li>调用时传入的参数为实际参数</li></ul><p><strong>必须参数和关键字参数</strong></p><ul><li>必须参数函数执行时必须要传递的函数</li><li>关键字参数可以解决调用时参数的位置</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def add(x,y):#x,y即为形式参数    result1=x+y    result2=x*y    return result1,result2a,b = add(y=1,x=2)#1,2为实际参数print(a,b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>默认参数</strong></p><ul><li>即在函数调用中需要重复传入的参数可以使用默认参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def student_file(name,gender="男",age="18",college="人民路小学"):    print("我叫"+name)    print("性别"+gender)    print("我今年"+age+"岁")    print("我在"+college+"上学")student_file("卢本伟")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>默认参数可以修改，在调用时传入即可</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def student_file(name,gender="男",age="18",college="人民路小学"):    print("我叫"+name)    print("性别"+gender)    print("我今年"+age+"岁")    print("我在"+college+"上学")student_file("卢本伟","女")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以搭配关键字参数使用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def student_file(name,gender="男",age="18",college="人民路小学"):    print("我叫"+name)    print("性别"+gender)    print("我今年"+age+"岁")    print("我在"+college+"上学")student_file("卢本伟",gender="女")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可变参数</strong></p><ul><li>用于接收一组数据，例如元组，列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def demo(*param):    print(param)    sum=0    for x in param:        sum+=x*x    print(sum)demo(1,2,3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关键字可变参数</strong></p><ul><li>接收一组数据，一般为字典</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">def city_tem(**param):    for x,y in param.items():        print(x,y)a = {"bj":"32c","hz":"25c"}city_tem(**a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>变量的作用域</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c = 1 #全局变量def demo():    a=1 #局部变量    print(c)demo()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>变量的作用域链</strong></p><ul><li>就近优先原则</li></ul><p><strong>global</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def demo():    global a    a=1demo()print(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使函数内部的局部变量转换成全局变量供外部调用</li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>知道什么是对象</li><li>知道什么是类</li></ul><p><strong>类的命名</strong></p><ul><li>类的命名首字母大写</li><li>类的命名单词连接都大写</li></ul><p><strong>类=面向对象</strong></p><ul><li>类的最基本作用:封装</li><li>用特征(数据成员),和行为描述类</li></ul><p><strong>类是一个模板，通过类可以实例化很多个对象</strong></p><p><strong>构造函数</strong></p><ul><li>作用:初始化对象的属性</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student():    name = "wwj"    age = 1    def __init__(self,name,age):        self.name=name        self.age=age        print(self.name)    def demo(self):        print("name"+self.name)        print("age"+str(self.age))student = Student("石敢当",18)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类变量和实例变量</strong></p><ul><li>在类下直接定义的是类变量</li><li>在方法中定义的为实例变量</li></ul><p><strong>方法下的变量要实例化</strong></p><ul><li>方法下的变量要用self.的前缀实例化</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">self.name=name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>调用类变量</strong></p><ul><li>可以通过<strong>类.变量名</strong>访问</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(Student.name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实例方法中访问类变量</strong></p><ul><li>方法一 类.变量名</li><li>方法二 通过self</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(self.__class__.name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>类方法</strong></p><ul><li>通过类方法可以修改类变量的数值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student():    name = "wwj" #这是类变量    age = 1    sum=0    def __init__(self,name,age):        # self.name=name        self.name=name  #这是实例变量        print(self.__class__.name)    def demo(self):        print("name"+self.name)        print("age"+str(self.age))    @classmethod    def plus_sum(cls):        cls.sum+=1        print(cls.sum)        student = Student("石敢当",18)Student.plus_sum()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类方法的官方推荐关键字<strong>cls</strong></li><li>在定义实例函数前添加<strong>装饰器@classmethod</strong>后为<strong>类方法</strong></li></ul><p><strong>静态方法不常用</strong></p><ul><li>当方法与对象和类关系不大时可以使用静态方法</li><li>没有类似self,cls的关键字</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">    @staticmethod    def add():        print("This is a static method")        student = Student("石敢当",18)Student.add()student.add()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>静态方法和类方法调用类变量的区别</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">@classmethoddef plus_sum(cls):    cls.sum+=1    print(cls.sum)#这是类方法调用类变量@staticmethoddef add():    print("This is a static method")    print(Student.name)#这是静态方法调用类变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成员可见性</strong></p><ul><li>当类下的方法或变量以双下划线开头命名，python会认为该方法为私有方法，禁止外部调用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">    def get_socre(self,score):        self.__score = score        print(self.name+"同学本次的考试成绩"+str(self.__score))student = Student("石敢当",18)student.get_socre(51)student.__score=-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json">{'name': '石敢当', '_Student__score': 51, '__score': -1}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>python的成员私有机制是通过改名的方式实现</li><li>还是可以访问</li><li>为了类中的数据安全，在修改类中的数据时，不应该直接访问而是通过方法传入</li></ul><p><strong>继承</strong></p><ul><li>子类调用父类变量</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">from c3 import Humanclass Student(Human):    def __init__(self,school,name,age):        self.school=school        Human.__init__(self,name,age)#这种方法不可取    def do_homework(self):        print("do english homework")        # super(Student, self).__init__(*args))student1=Student("人民路小学","石敢当",18)        print(student1.name)print(student1.age)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用super正确继承父类方法和变量</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">from c3 import Humanclass Student(Human):    def __init__(self,school,name,age):        self.school=school        # Human.__init__(self,name,age)        super(Student, self).__init__(name,age)  #正确调用    def do_homework(self):        print("do english homework")student1=Student("人民路小学","石敢当",18)        print(student1.name)print(student1.age)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子类继承父类思维导图</strong></p><img src="https://s3.bmp.ovh/imgs/2021/09/6030e7eb14d5fd91.png" style="zoom:50%;"><p><strong>python类思维导图</strong></p><img src="https://s3.bmp.ovh/imgs/2021/09/7dfe4268272b4da2.png" style="zoom: 50%;"><h2 id="正则表达式与json"><a href="#正则表达式与json" class="headerlink" title="正则表达式与json"></a>正则表达式与json</h2><p><strong>正则表达式</strong></p><ul><li>正则表达式是一个特殊的字符序列</li><li>一串字符是否与我们设定的这样的字符序列相匹配</li><li>快速检索文本，实现一些替换文本的操作</li></ul><p><strong>Python一些内置的文本处理函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a = "C|C++|Java|Python"print(a.index("Python")&gt;-1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">print("Python" in a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>初识正则</strong></p><ul><li>re包有支持正则的依赖</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rea = "C|C++|Java|Python"# print(a.index("Python")&gt;-1)# print("Python" in a)r=re.findall("Python",a)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>匹配数字</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rea = "C0C++1Java2Python"# print(a.index("Python")&gt;-1)# print("Python" in a)r=re.findall("\d",a)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符集</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import res ='abc,acc,adc,aec,afc'r=re.findall('a[a-f]c',s)#r=re.findall('^a[a-f]c',s)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类似于e中的文本_取出中间文本</li><li>在前面加^可以达到取反的效果</li><li>中括号内的为概括字符集</li></ul><p><strong>概括字符集</strong></p><ul><li>/d 匹配数字 /D匹配非数字</li><li>/w单词字符 /W非单词字符</li><li>/s空白字符 /S非空白字符</li><li>.号匹配除\n以外所有的字符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rea = "python66java779php"r = re.findall('\w',a)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数量词</strong></p><ul><li>在正则表达式后添加{}数量区间，以逗号隔开可以匹配多个字符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rea = 'python 111 java 222php'r = re.findall('[a-z]{3,6}',a)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>贪婪与非贪婪</strong></p><ul><li>在正则表达式数量词后添加?执行非贪婪搜索</li><li>Python默认会进行贪婪搜索</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rea = 'python 111 java 222php'r = re.findall('[a-z]{3,6}?',a)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>匹配0次,1次或者无限多次</strong></p><ul><li>*号匹配0次或无限多次</li><li>+号匹配1次或无限多次</li><li>?号匹配0次或1次</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rea = 'pytho11python33pythonn'r =re.findall('python*',a)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>边界匹配符</strong></p><ul><li>^开始$结尾表示匹配一整个文本</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import reqq = '10000'r = re.findall('^\d{4,8}$',qq)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>组</strong></p><ul><li>用()包含起来就是一组</li><li>[]包含起来里的每个字母是或的关系</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rea = 'wwjwwjwwj'r = re.findall('(wwj){3}',a)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>匹配模式参数</strong></p><ul><li>findall()函数第三个参数是匹配模式</li><li>re.I表示忽略大小写匹配,re.S表示匹配所有字符包括换行符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rea = 'wwjC#\nwwjwwj'r = re.findall('c#.{1}',a,re.I | re.S)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>re.sub正则替换</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import re a = 'phpgojavac#'r = re.sub('c#','python',a,0)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以使用.replace方法实现</li></ul><p><strong>把函数作为参数传入</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import res = 'a1b4j1k4l9s8d9g0s0w1'def convert(value):    matched = value.group()    if int(matched) &gt;=6:        return '9'    else:        return '0'r = re.sub('\d',convert,s)print(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>search和match函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import res = 'a1b4j1k4l9s8d9g0s0w1'r = re.search('\d',s)r1 = re.match('\d',s)print(r)print(r1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>search将搜寻整个文本，如果找到匹配立刻停止并且返回</li><li>match会从开头开始匹配，如果失败立刻终止</li></ul><p><strong>group分组</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import res = 'life is short,i love python'#目的取出life 和 python中间的文本r =re.search('life(.*) python',s)print(r.group(1))#要匹配结果从1开始#类似于易语言中的文本_取出中间文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>学习正则的建议</strong></p><ul><li>常用正则可以使用他人写好的,但要自己研究一下</li><li>常用常记，熟能生巧</li></ul><p><strong>理解json</strong></p><ul><li>什么是json: Javascript object notion</li><li>是一种轻量级的数据交换格式</li><li>字符串是json的表现形式</li><li>复合json规范的加json字符串</li></ul><p><strong>json的优势</strong></p><ul><li>易于阅读</li><li>易于解析</li><li>网络传输效率高</li><li>反序列化-将json解析成语言所对应的格式</li><li>序列化-将语言所对应的格式组装成json</li></ul><h2 id="Python的高级语法与用法"><a href="#Python的高级语法与用法" class="headerlink" title="Python的高级语法与用法"></a>Python的高级语法与用法</h2><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h2 id="实战-原生爬虫"><a href="#实战-原生爬虫" class="headerlink" title="实战:原生爬虫"></a>实战:原生爬虫</h2><h2 id="Pythonic与Python杂记"><a href="#Pythonic与Python杂记" class="headerlink" title="Pythonic与Python杂记"></a>Pythonic与Python杂记</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>商大云战役</title>
      <link href="/2021/08/11/yun-zhan-yi/"/>
      <url>/2021/08/11/yun-zhan-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="sparkles-项目介绍"><a href="#sparkles-项目介绍" class="headerlink" title=":sparkles:项目介绍"></a><span class="github-emoji"><span>✨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>项目介绍</h2><p>​    伴随着疫情的到来，学校为了解在校师生的健康状况，全校师生都规定在特定的时间进行健康打卡 or 校内打卡，本项目旨在帮助使用<strong>商大云战疫</strong>打卡的在校师生提供帮助，每天指定时间进行自动打卡，从每天指定时间打卡的压力中解放出来，全身心地投入到社会主义建设之中去。</p><h2 id="🔰项目功能"><a href="#🔰项目功能" class="headerlink" title="🔰项目功能"></a>🔰项目功能</h2><ul><li>[x]商大云战役模拟登录取cookie</li><li>[x]自定义地址</li><li>[x]每天0点自动打卡，并在打卡后返回打卡结果</li><li>[x]支持多人同时打卡</li><li>[x]支持喵提醒，pushplus推送</li></ul><h2 id="🎨配置文件"><a href="#🎨配置文件" class="headerlink" title="🎨配置文件"></a>🎨配置文件</h2><h3 id="💃用户配置"><a href="#💃用户配置" class="headerlink" title="💃用户配置"></a>💃用户配置</h3><ul><li>修改账号密码未自己的账号密码</li><li>修改省份详细地址为自己的地址</li><li>修改<strong>pushplus</strong>的token为自己的token</li></ul><h3 id="🤝统一推送配置"><a href="#🤝统一推送配置" class="headerlink" title="🤝统一推送配置"></a>🤝统一推送配置</h3><ul><li>默认使用pushplus推送</li><li>当然你可以其他推送渠道，前提自己会写</li><li>不懂代码别乱改</li></ul><h2 id="💦使用方法（云函数）"><a href="#💦使用方法（云函数）" class="headerlink" title="💦使用方法（云函数）"></a>💦使用方法（云函数）</h2><ul><li><strong>beta测试版，时间紧急写的仓促</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requestsimport timeimport jsonDATA=[{"1111111111":"111111"}]#你的账号密码log=[]PUSH_TOKEN='填写你的密钥'#你的密钥LOGIN_URL = 'https://nco.zjgsu.edu.cn/login'SUBMIT_URL='https://nco.zjgsu.edu.cn/'LOGIN_HEADER={    "User-Agent":"Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1 Edg/93.0.4577.82",    'Content-Type': 'application/x-www-form-urlencoded'}LOGIN_BODY={    "name":"",    "psswd":""}SUBMIT_BODY={        'uuid':'a59e0ac8-da06-4fb1-83d8-000976c317a9',        'locationInfo': '浙江省', #可以修改        'currentResd': '浙江省杭州市江干区浙江工商大学钱江湾生活园区', #可以修改        'fromHbToZjDate': '',        'fromHbToZj': 'C',        'fromWtToHzDate': '',        'fromWtToHz': 'B',        'meetDate': '',        'meetCase': 'C',        'travelDate': '',        'travelCase': 'D',        'medObsvReason': '',        'medObsv': 'B',        'belowCaseDesc': '',        'belowCase': 'D',        'temperature': '',        'notApplyReason': '',        'hzQRCode': 'A',        'specialDesc': ''}def nco():    for x in DATA:        for u,p in x.items():            LOGIN_BODY['name']=u            LOGIN_BODY['psswd']=p            response=requests.post(url=LOGIN_URL,headers=LOGIN_HEADER,data=LOGIN_BODY)            cookies = response.cookies            submit_response=requests.post(SUBMIT_URL,headers=LOGIN_HEADER,cookies=cookies,data=SUBMIT_BODY)            if '报送成功' in submit_response.text:                print("账号："+u+"当天已填报")                log.append("账号："+u+"********填报成功！********")            else:                log.append("账号："+u+"********填报失败！********")                print("账号："+u+"当天未填报")        time.sleep(0.002)  def push():    token = PUSH_TOKEN    title= '浙工商打卡小助手提示您'     content =log    url = 'http://pushplus.hxtrip.com/send'    data = {    "token":token,    "title":title,    "content":content,    "template":"html"    }    body=json.dumps(data).encode(encoding='utf-8')    headers = {'Content-Type':'application/json'}    requests.post(url,data=body,headers=headers)    print('发送成功')def main_handler(event, context):    nco()    push()if __name__=='__main__':    nco()       push()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cloud-腾讯云函数配置"><a href="#cloud-腾讯云函数配置" class="headerlink" title=":cloud:腾讯云函数配置"></a><span class="github-emoji"><span>☁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>腾讯云函数配置</h2><ul><li><p>打开云函数官网<a href="https://console.cloud.tencent.com/scf/list?rid=1&amp;ns=default">云函数官网-函数服务 - Serverless - 控制台 (tencent.com)</a></p></li><li><img src="https://s3.bmp.ovh/imgs/2021/09/bab2dc4bffe0cdbd.png" style="zoom:50%;"></li><li><p>选择自定义创建，其他配置默认</p></li><li><img src="https://s3.bmp.ovh/imgs/2021/09/66d42986c9fc299a.png" style="zoom:50%;"></li><li><p>配置触发器配置 选择触发周期为每天0点</p></li></ul><h2 id="runner-其他版本"><a href="#runner-其他版本" class="headerlink" title=":runner:其他版本"></a><span class="github-emoji"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>其他版本</h2><ul><li>已开发易语言和Python版本</li><li>未来会提供网页版本和小程序版本</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
